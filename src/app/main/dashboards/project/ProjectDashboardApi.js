import { apiService as api } from 'app/store/apiService';
import {
  GET_DASHBOARD_CHART_DATA,
  GET_DEBTOR_AND_CREDITOR_DATA,
  GET_FLIGHT_COUNT,
  GET_FLIGHT_STATUS_SUMMARY,
  GET_INCOMPLETE_TOTAL_FLIGHT_LIST,
  GET_LATEST_FLIGHT_LIST,
  GET_MANPOWER_COUNT,
  GET_MEDICAL_COUNT,
  GET_TOTAL_ACCOUNT_SUMMARY_LIST,
  GET_UPCOMING_E_VISA_COUNT,
  GET_UPCOMING_EMBASSY_COUNT,
  GET_UPCOMING_MEDICAL_COUNT,
  GET_UPCOMING_VISA_COUNT,
  GET_VISA_COUNT,
} from 'src/app/constant/constants';

// Define the tag types for cache management
export const addTagTypes = ['dashboard', 'ProjectDashboardProjects'];

const ProjectDashboardApi = api
  .enhanceEndpoints({
    addTagTypes,
  })
  .injectEndpoints({
    endpoints: (build) => ({
      // Fetch upcoming medical data
      getProjectDashboardUpcomingMedical: build.query({
        query: (filterData) => ({
          url: GET_UPCOMING_MEDICAL_COUNT,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardUpcomingVisa: build.query({
        query: (filterData) => ({
          url: GET_UPCOMING_VISA_COUNT,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardUpcomingEvisa: build.query({
        query: (filterData) => ({
          url: GET_UPCOMING_E_VISA_COUNT,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardUpcomingEmbassy: build.query({
        query: (filterData) => ({
          url: GET_UPCOMING_EMBASSY_COUNT,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardNotMedical: build.query({
        query: (filterData) => ({
          url: GET_MEDICAL_COUNT,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardVisaCount: build.query({
        query: (filterData) => ({
          url: GET_VISA_COUNT,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardManpower: build.query({
        query: (filterData) => ({
          url: GET_MANPOWER_COUNT,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardFlightCount: build.query({
        query: (filterData) => ({
          url: GET_FLIGHT_COUNT,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardFlightChart: build.query({
        query: (filterData) => ({
          url: GET_DASHBOARD_CHART_DATA,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardFlightList: build.query({
        query: (filterData) => ({
          url: GET_LATEST_FLIGHT_LIST,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardStatusSummary: build.query({
        query: (filterData) => ({
          url: GET_FLIGHT_STATUS_SUMMARY,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardIncompleteFlight: build.query({
        query: (filterData) => ({
          url: GET_INCOMPLETE_TOTAL_FLIGHT_LIST,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardAccountSummary: build.query({
        query: (filterData) => ({
          url: GET_TOTAL_ACCOUNT_SUMMARY_LIST,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardDebtorCreditor: build.query({
        query: (filterData) => ({
          url: GET_DEBTOR_AND_CREDITOR_DATA,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),
      getProjectDashboardPurchaseSummary: build.query({
        query: (filterData) => ({
          url: GET_DEBTOR_AND_CREDITOR_DATA,
          params: filterData,
        }),

        providesTags: ['dashboard'],
      }),

      // Fetch project dashboard projects
      getProjectDashboardProjects: build.query({
        query: () => ({
          url: '/mock-api/dashboards/project/projects',
        }),
        providesTags: ['ProjectDashboardProjects'],
      }),
    }),
    overrideExisting: false,
  });

// Export the hooks generated by RTK Query
export const {
  useGetProjectDashboardUpcomingMedicalQuery,
  useGetProjectDashboardUpcomingVisaQuery,
  useGetProjectDashboardUpcomingEvisaQuery,
  useGetProjectDashboardUpcomingEmbassyQuery,
  useGetProjectDashboardNotMedicalQuery,
  useGetProjectDashboardVisaCountQuery,
  useGetProjectDashboardManpowerQuery,
  useGetProjectDashboardFlightCountQuery,
  useGetProjectDashboardFlightChartQuery,
  useGetProjectDashboardFlightListQuery,
  useGetProjectDashboardStatusSummaryQuery,
  useGetProjectDashboardIncompleteFlightQuery,
  useGetProjectDashboardAccountSummaryQuery,
  useGetProjectDashboardDebtorCreditorQuery,
  useGetProjectDashboardPurchaseSummaryQuery,
} = ProjectDashboardApi;

// Selector to fetch a specific widget by ID
export const selectWidget = (id) => (state) => {
  const widgets =
    ProjectDashboardApi.endpoints.getProjectDashboardUpcomingMedical.select()(
      state
    )?.data;
  return widgets?.[id];
};

export default ProjectDashboardApi;
