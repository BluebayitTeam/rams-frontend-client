import { apiService as api } from 'app/store/apiService';
import { GET_MEDICAL_COUNT, GET_UPCOMING_MEDICAL_COUNT } from 'src/app/constant/constants';

// Define the tag types for cache management
export const addTagTypes = ['dashboard', 'ProjectDashboardProjects'];

const ProjectDashboardApi = api
  .enhanceEndpoints({
    addTagTypes,
  })
  .injectEndpoints({
    endpoints: (build) => ({
      // Fetch upcoming medical data
      getProjectDashboardUpcomingMedical: build.query({
        query: ({ no_of_days }) => ({
          url: GET_UPCOMING_MEDICAL_COUNT,
          params: { no_of_days },
        }),
        providesTags: ['dashboard'],
      }),

      // Fetch project dashboard projects
      getProjectDashboardProjects: build.query({
        query: () => ({
          url: '/mock-api/dashboards/project/projects',
        }),
        providesTags: ['ProjectDashboardProjects'],
      }),
    }),
    overrideExisting: false,
  });

// Export the hooks generated by RTK Query
export const {
  useGetProjectDashboardUpcomingMedicalQuery,
  useGetProjectDashboardProjectsQuery,
} = ProjectDashboardApi;

// Selector to fetch a specific widget by ID
export const selectWidget = (id) => (state) => {
  const widgets =
    ProjectDashboardApi.endpoints.getProjectDashboardUpcomingMedical.select()(
      state
    )?.data;
  return widgets?.[id];
};

export default ProjectDashboardApi;
